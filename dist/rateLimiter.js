(()=>{var e={964:(e,t,o)=>{o(998).config();const n=o(675),r={type:"service_account",project_id:process.env.REACT_APP_FIREBASE_PROJECT_ID,private_key_id:process.env.REACT_APP_FIREBASE_PRIVATE_KEY_ID,private_key:process.env.REACT_APP_FIREBASE_PRIVATE_KEY.replace(/\\n/g,"\n"),client_email:process.env.REACT_APP_FIREBASE_CLIENT_EMAIL,client_id:process.env.REACT_APP_FIREBASE_CLIENT_ID,auth_uri:process.env.REACT_APP_FIREBASE_AUTH_URI,token_uri:process.env.REACT_APP_FIREBASE_TOKEN_URI,auth_provider_x509_cert_url:process.env.REACT_APP_FIREBASE_AUTH_PROVIDER_CERT,client_x509_cert_url:process.env.REACT_APP_FIREBASE_CLIENT_CERT};n.initializeApp({credential:n.credential.cert(r)});const s=n.firestore(),a=n.auth();e.exports={db:s,auth:a}},998:(e,t,o)=>{const n=o(896),r=o(928),s=o(857),a=o(982),i=o(56).version,c=/(?:^|^)\s*(?:export\s+)?([\w.-]+)(?:\s*=\s*?|:\s+?)(\s*'(?:\\'|[^'])*'|\s*"(?:\\"|[^"])*"|\s*`(?:\\`|[^`])*`|[^#\r\n]+)?\s*(?:#.*)?(?:$|$)/gm;function l(e){console.log(`[dotenv@${i}][DEBUG] ${e}`)}function p(e){return e&&e.DOTENV_KEY&&e.DOTENV_KEY.length>0?e.DOTENV_KEY:process.env.DOTENV_KEY&&process.env.DOTENV_KEY.length>0?process.env.DOTENV_KEY:""}function u(e,t){let o;try{o=new URL(t)}catch(e){if("ERR_INVALID_URL"===e.code){const e=new Error("INVALID_DOTENV_KEY: Wrong format. Must be in valid uri format like dotenv://:key_1234@dotenvx.com/vault/.env.vault?environment=development");throw e.code="INVALID_DOTENV_KEY",e}throw e}const n=o.password;if(!n){const e=new Error("INVALID_DOTENV_KEY: Missing key part");throw e.code="INVALID_DOTENV_KEY",e}const r=o.searchParams.get("environment");if(!r){const e=new Error("INVALID_DOTENV_KEY: Missing environment part");throw e.code="INVALID_DOTENV_KEY",e}const s=`DOTENV_VAULT_${r.toUpperCase()}`,a=e.parsed[s];if(!a){const e=new Error(`NOT_FOUND_DOTENV_ENVIRONMENT: Cannot locate environment ${s} in your .env.vault file.`);throw e.code="NOT_FOUND_DOTENV_ENVIRONMENT",e}return{ciphertext:a,key:n}}function d(e){let t=null;if(e&&e.path&&e.path.length>0)if(Array.isArray(e.path))for(const o of e.path)n.existsSync(o)&&(t=o.endsWith(".vault")?o:`${o}.vault`);else t=e.path.endsWith(".vault")?e.path:`${e.path}.vault`;else t=r.resolve(process.cwd(),".env.vault");return n.existsSync(t)?t:null}function f(e){return"~"===e[0]?r.join(s.homedir(),e.slice(1)):e}const E={configDotenv:function(e){const t=r.resolve(process.cwd(),".env");let o="utf8";const s=Boolean(e&&e.debug);e&&e.encoding?o=e.encoding:s&&l("No encoding is specified. UTF-8 is used by default");let a,i=[t];if(e&&e.path)if(Array.isArray(e.path)){i=[];for(const t of e.path)i.push(f(t))}else i=[f(e.path)];const c={};for(const t of i)try{const r=E.parse(n.readFileSync(t,{encoding:o}));E.populate(c,r,e)}catch(e){s&&l(`Failed to load ${t} ${e.message}`),a=e}let p=process.env;return e&&null!=e.processEnv&&(p=e.processEnv),E.populate(p,c,e),a?{parsed:c,error:a}:{parsed:c}},_configVault:function(e){console.log(`[dotenv@${i}][INFO] Loading env from encrypted .env.vault`);const t=E._parseVault(e);let o=process.env;return e&&null!=e.processEnv&&(o=e.processEnv),E.populate(o,t,e),{parsed:t}},_parseVault:function(e){const t=d(e),o=E.configDotenv({path:t});if(!o.parsed){const e=new Error(`MISSING_DATA: Cannot parse ${t} for an unknown reason`);throw e.code="MISSING_DATA",e}const n=p(e).split(","),r=n.length;let s;for(let e=0;e<r;e++)try{const t=u(o,n[e].trim());s=E.decrypt(t.ciphertext,t.key);break}catch(t){if(e+1>=r)throw t}return E.parse(s)},config:function(e){if(0===p(e).length)return E.configDotenv(e);const t=d(e);return t?E._configVault(e):(o=`You set DOTENV_KEY but you are missing a .env.vault file at ${t}. Did you forget to build it?`,console.log(`[dotenv@${i}][WARN] ${o}`),E.configDotenv(e));var o},decrypt:function(e,t){const o=Buffer.from(t.slice(-64),"hex");let n=Buffer.from(e,"base64");const r=n.subarray(0,12),s=n.subarray(-16);n=n.subarray(12,-16);try{const e=a.createDecipheriv("aes-256-gcm",o,r);return e.setAuthTag(s),`${e.update(n)}${e.final()}`}catch(e){const t=e instanceof RangeError,o="Invalid key length"===e.message,n="Unsupported state or unable to authenticate data"===e.message;if(t||o){const e=new Error("INVALID_DOTENV_KEY: It must be 64 characters long (or more)");throw e.code="INVALID_DOTENV_KEY",e}if(n){const e=new Error("DECRYPTION_FAILED: Please check your DOTENV_KEY");throw e.code="DECRYPTION_FAILED",e}throw e}},parse:function(e){const t={};let o,n=e.toString();for(n=n.replace(/\r\n?/gm,"\n");null!=(o=c.exec(n));){const e=o[1];let n=o[2]||"";n=n.trim();const r=n[0];n=n.replace(/^(['"`])([\s\S]*)\1$/gm,"$2"),'"'===r&&(n=n.replace(/\\n/g,"\n"),n=n.replace(/\\r/g,"\r")),t[e]=n}return t},populate:function(e,t,o={}){const n=Boolean(o&&o.debug),r=Boolean(o&&o.override);if("object"!=typeof t){const e=new Error("OBJECT_REQUIRED: Please check the processEnv argument being passed to populate");throw e.code="OBJECT_REQUIRED",e}for(const o of Object.keys(t))Object.prototype.hasOwnProperty.call(e,o)?(!0===r&&(e[o]=t[o]),n&&l(!0===r?`"${o}" is already defined and WAS overwritten`:`"${o}" is already defined and was NOT overwritten`)):e[o]=t[o]}};e.exports.configDotenv=E.configDotenv,e.exports._configVault=E._configVault,e.exports._parseVault=E._parseVault,e.exports.config=E.config,e.exports.decrypt=E.decrypt,e.exports.parse=E.parse,e.exports.populate=E.populate,e.exports=E},675:e=>{"use strict";e.exports=require("firebase-admin")},982:e=>{"use strict";e.exports=require("crypto")},896:e=>{"use strict";e.exports=require("fs")},857:e=>{"use strict";e.exports=require("os")},928:e=>{"use strict";e.exports=require("path")},56:e=>{"use strict";e.exports=JSON.parse('{"name":"dotenv","version":"16.4.5","description":"Loads environment variables from .env file","main":"lib/main.js","types":"lib/main.d.ts","exports":{".":{"types":"./lib/main.d.ts","require":"./lib/main.js","default":"./lib/main.js"},"./config":"./config.js","./config.js":"./config.js","./lib/env-options":"./lib/env-options.js","./lib/env-options.js":"./lib/env-options.js","./lib/cli-options":"./lib/cli-options.js","./lib/cli-options.js":"./lib/cli-options.js","./package.json":"./package.json"},"scripts":{"dts-check":"tsc --project tests/types/tsconfig.json","lint":"standard","lint-readme":"standard-markdown","pretest":"npm run lint && npm run dts-check","test":"tap tests/*.js --100 -Rspec","test:coverage":"tap --coverage-report=lcov","prerelease":"npm test","release":"standard-version"},"repository":{"type":"git","url":"git://github.com/motdotla/dotenv.git"},"funding":"https://dotenvx.com","keywords":["dotenv","env",".env","environment","variables","config","settings"],"readmeFilename":"README.md","license":"BSD-2-Clause","devDependencies":{"@definitelytyped/dtslint":"^0.0.133","@types/node":"^18.11.3","decache":"^4.6.1","sinon":"^14.0.1","standard":"^17.0.0","standard-markdown":"^7.1.0","standard-version":"^9.5.0","tap":"^16.3.0","tar":"^6.1.11","typescript":"^4.8.4"},"engines":{"node":">=12"},"browser":{"fs":false}}')}},t={};function o(n){var r=t[n];if(void 0!==r)return r.exports;var s=t[n]={exports:{}};return e[n](s,s.exports,o),s.exports}o.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return o.d(t,{a:t}),t},o.d=(e,t)=>{for(var n in t)o.o(t,n)&&!o.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},o.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),o.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})};var n={};(()=>{"use strict";o.r(n),o.d(n,{default:()=>t});var e=o(964);const t=async t=>{console.log("Edge Function Invoked");const o=t.request,n=o.headers.get("x-forwarded-for")||o.headers.get("client-ip");if(!n)return console.log("IP address not found in headers"),new Response("Internal Server Error",{status:500});const r=Math.floor(Date.now()/1e3),s=e.db.collection("rateLimits").doc(n);try{let e=(await s.get()).data();if(!e)return e={count:1,lastRequest:r,blockedUntil:0},await s.set(e),console.log(`Initial request from IP: ${n}`),t.next();if(console.log(`IP: ${n}, Current Time: ${r}, Rate Limit Data: ${JSON.stringify(e)}`),e.blockedUntil>r)return console.log(`IP ${n} is currently blocked until ${e.blockedUntil}`),new Response("Too Many Requests - Try again later",{status:429});if(r-e.lastRequest<60){if(e.count>=5)return e.blockedUntil=r+60,e.count=0,await s.set(e),console.log(`Rate limit exceeded for IP: ${n}, blocking for 60 seconds`),new Response("Too Many Requests - Blocked for 60 seconds",{status:429});e.count+=1}else e.count=1;return e.lastRequest=r,await s.set(e),console.log(`Updated Rate Limit Data: ${JSON.stringify(e)}`),t.next()}catch(e){return console.error("Error accessing Firestore:",e),new Response("Internal Server Error",{status:500})}}})(),module.exports=n})();